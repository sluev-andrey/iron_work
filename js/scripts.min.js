;

document.addEventListener("DOMContentLoaded", function() {
    initializeOwlSpecialists()
    initializeOwlDocuments()
    initializeOwlRepair()
}, {passive:true});

function initializeOwlSpecialists(_destroy = false) {
    const carousel_Settings = {
        items: 1,
        loop: false,
        margin: 16,
        nav: false,
        lazyLoad: true,
        dots: true,
        navText: [
            '<svg xmlns="http://www.w3.org/2000/svg" width="56" height="49" viewBox="0 0 56 49" fill="none">\n' +
            '  <path d="M30.4854 16L22.0001 24.4853L30.4854 32.9706" stroke="black" stroke-width="2"/>\n' +
            '  <path d="M14.5773 1L41.4226 1L54.8453 24.2487L41.4226 47.4974H14.5773L1.1547 24.2487L14.5773 1Z" stroke="black" stroke-width="2"/>\n' +
            '</svg>',
            '<svg xmlns="http://www.w3.org/2000/svg" width="56" height="49" viewBox="0 0 56 49" fill="none">\n' +
            '  <path d="M26.4854 16.2485L34.9706 24.7338L26.4854 33.2191" stroke="black" stroke-width="2"/>\n' +
            '  <path d="M14.5773 1L41.4226 1L54.8453 24.2487L41.4226 47.4974H14.5773L1.1547 24.2487L14.5773 1Z" stroke="black" stroke-width="2"/>\n' +
            '</svg>'
        ],

        responsive:{
            0:{
                autoWidth: false,
            },
            576:{
                autoWidth: false,
            },
            1200:{
                nav: true,
            }
        }
    }
    const $owl = $('[data-slider="OwlSpecialists"]')

    if (document.querySelector('[data-slider="OwlSpecialists"]')) {
        if (_destroy) {
            $owl.trigger('destroy.owl.carousel').removeClass('owl-carousel owl-loaded');
            $owl.find('.owl-stage-outer').children().unwrap();
        } else {
            $owl.addClass('owl-carousel')
            $owl.owlCarousel(carousel_Settings)
        }
    }
}

function initializeOwlDocuments(_destroy = false) {
    const carousel_Settings = {
        loop: false,
        nav: false,
        lazyLoad: true,
        dots: false,
        responsive: {
            0: {
                items: 1,
                autoWidth: true,
                margin: 16,
            },
            768: {
                items: 2,
                autoWidth: true,
                margin: 16,
            },
            1200: {
                margin: 24,
                items: 3,
            },
        }
    }
    const $owl = $('[data-slider="OwlDocuments"]')

    if (document.querySelector('[data-slider="OwlDocuments"]')) {
        if (_destroy) {
            $owl.trigger('destroy.owl.carousel').removeClass('owl-carousel owl-loaded');
            $owl.find('.owl-stage-outer').children().unwrap();
        } else {
            $owl.addClass('owl-carousel')
            $owl.owlCarousel(carousel_Settings)

            $('.customDocumentsNextBtn').click(function() {
                $owl.trigger('next.owl.carousel');
            })
            $('.customDocumentsPrevBtn').click(function() {
                $owl.trigger('prev.owl.carousel');
            })

            $owl.on('changed.owl.carousel', function (e) {
                if (e.item.index >= 1)
                    $('.customDocumentsPrevBtn').removeClass('disabled')
                else
                    $('.customDocumentsPrevBtn').addClass('disabled')

                if (e.item.index === (e.item.count - 3))
                    $('.customDocumentsNextBtn').addClass('disabled')
                else
                    $('.customDocumentsNextBtn').removeClass('disabled')
            })
        }
    }
}

function initializeOwlRepair(_destroy = false){
    var carousel;
    var carouselOptions = {

        nav: false,
        dots: true,
        slideBy: 'page',
        responsive: {
            320: {
                items: 1,
                rows: 1,
                slideBy: 1,
            },
            768: {
                margin: 16,
                items: 2,
                rows: 2,
                slideBy: 2,
            },
            1200: {
                margin: 24,
                items: 3,
                rows: 1,
                slideBy: 3,
            }
        }
    };

    var el = $('[data-slider="OwlRepair"]');

    var viewport = function() {
        var width;
        if (carouselOptions.responsiveBaseElement && carouselOptions.responsiveBaseElement !== window) {
            width = $(carouselOptions.responsiveBaseElement).width();
        } else if (window.innerWidth) {
            width = window.innerWidth;
        } else if (document.documentElement && document.documentElement.clientWidth) {
            width = document.documentElement.clientWidth;
        } else {
            console.warn('Can not detect viewport width.');
        }
        return width;
    };

    var severalRows = false;
    var orderedBreakpoints = [];
    for (var breakpoint in carouselOptions.responsive) {
        if (carouselOptions.responsive[breakpoint].rows > 1) {
            severalRows = true;
        }
        orderedBreakpoints.push(parseInt(breakpoint));
    }

    if (severalRows) {
        orderedBreakpoints.sort(function (a, b) {
            return b - a;
        });
        var slides = el.find('[data-slide-index]');
        var slidesNb = slides.length;
        if (slidesNb > 0) {
            var rowsNb;
            var previousRowsNb = undefined;
            var colsNb;
            var previousColsNb = undefined;

            var updateRowsColsNb = function () {
                var width =  viewport();
                for (var i = 0; i < orderedBreakpoints.length; i++) {
                    var breakpoint = orderedBreakpoints[i];
                    if (width >= breakpoint || i == (orderedBreakpoints.length - 1)) {
                        var breakpointSettings = carouselOptions.responsive['' + breakpoint];
                        rowsNb = breakpointSettings.rows;
                        colsNb = breakpointSettings.items;
                        break;
                    }
                }
            };

            var updateCarousel = function () {
                updateRowsColsNb();


                if (rowsNb != previousRowsNb || colsNb != previousColsNb) {
                    var reInit = false;
                    if (carousel) {
                        carousel.trigger('destroy.owl.carousel');
                        carousel = undefined;
                        slides = el.find('[data-slide-index]').detach().appendTo(el);
                        el.find('.fake-col-wrapper').remove();
                        reInit = true;
                    }

                    var perPage = rowsNb * colsNb;
                    var pageIndex = Math.floor(slidesNb / perPage);
                    var fakeColsNb = pageIndex * colsNb + (slidesNb >= (pageIndex * perPage + colsNb) ? colsNb : (slidesNb % colsNb));

                    var count = 0;
                    for (var i = 0; i < fakeColsNb; i++) {
                        var fakeCol = $('<div class="fake-col-wrapper"></div>').appendTo(el);
                        for (var j = 0; j < rowsNb; j++) {
                            var index = Math.floor(count / perPage) * perPage + (i % colsNb) + j * colsNb;
                            if (index < slidesNb) {
                                slides.filter('[data-slide-index=' + index + ']').detach().appendTo(fakeCol);
                            }
                            count++;
                        }
                    }

                    previousRowsNb = rowsNb;
                    previousColsNb = colsNb;

                    if (reInit) {
                        carousel = el.owlCarousel(carouselOptions);
                    }
                }
            };

            $(window).on('resize', updateCarousel);

            updateCarousel();
        }
    }

    if (document.querySelector('[data-slider="OwlRepair"]')) {
        if (_destroy) {
            el.trigger('destroy.owl.carousel').removeClass('owl-carousel owl-loaded');
            el.find('.owl-stage-outer').children().unwrap();
        } else {
            el.addClass('owl-carousel')
            carousel = el.owlCarousel(carouselOptions)


            $('.customRepairNextBtn').click(function() {
                carousel.trigger('next.owl.carousel');
            })
            $('.customRepairPrevBtn').click(function() {
                carousel.trigger('prev.owl.carousel');
            })

            carousel.on('changed.owl.carousel', function (e) {
                if (e.item.index >= 1)
                    $('.customRepairPrevBtn').removeClass('disabled')
                else
                    $('.customRepairPrevBtn').addClass('disabled')

                if (e.item.index === (e.item.count - 3))
                    $('.customRepairNextBtn').addClass('disabled')
                else
                    $('.customRepairNextBtn').removeClass('disabled')
            })
        }
    }
}
;
;
document.addEventListener("DOMContentLoaded", function() {
    let popupBg = document.querySelector('[data-popup-bg]');
    let popup = document.querySelector('[data-popup]');
    let openPopupButtons = document.querySelectorAll('[data-open-popup]');
    let closePopupButton = document.querySelector('[data-close-popup]');

    document.addEventListener('click', (e) => {
        if (e.target === popupBg) {
            popupBg.classList.remove('active');
            popup.classList.remove('active');
        }
    });
    closePopupButton.addEventListener('click', () => {
        popupBg.classList.remove('active');
        popup.classList.remove('active');
    });

    openPopupButtons.forEach((button) => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            popupBg.classList.add('active');
            popup.classList.add('active');
        })
    });
})


;
;

document.addEventListener("DOMContentLoaded", function() {
    const quiz = new ASH_quiz()
    quiz.initializeQuiz()
}, {passive:true});

class ASH_quiz {
    quiz = document.querySelector('[data-quiz]')
    stepContainer = this.quiz.querySelector('[data-quiz-steps]')
    quizNext = this.quiz.querySelector('[data-quiz-btn-navigation="next"]')
    quizPrev = this.quiz.querySelector('[data-quiz-btn-navigation="prev"]')
    finalStep = document.createElement('div')
    progress = document.createElement('div')
    bar = document.createElement('ul')
    counter = document.createElement('span')
    steps = null
    curStep = 0

    initializeQuiz(n = 0){
        this.curStep = n
        this.ShowBtns(this.curStep)

        this.quizPrev.addEventListener('click', this.NavQuizPrev)
        this.quizNext.addEventListener('click', this.NavQuizNext)

        this.finalStep.setAttribute('data-quiz-step','final')
        this.finalStep.classList.add('b-quiz__quiz__item')
        this.finalStep.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="148" height="128" viewBox="0 0 148 128" fill="none">
            <path d="M111 1.44856e-06L148 64L111 128H37L0 64L37 0L111 1.44856e-06Z" fill="black"/>
            <path d="M111 1.44856e-06L37 128L0 64L37 0L111 1.44856e-06Z" fill="#424653"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M82.8529 53.8864C72.7673 63.174 64.2822 70.9941 63.9972 71.2643L63.4791 71.7559L55.5474 63.3456C51.1851 58.72 47.5515 54.9567 47.4728 54.9827C47.3943 55.0087 45.0057 57.1891 42.165 59.8277L37 64.6252L37.5271 65.2255C37.8168 65.5557 43.6141 71.715 50.4097 78.9129L62.7656 92L63.5681 91.2269C64.0096 90.8017 74.6192 81.0328 87.145 69.5183C99.6708 58.0036 110.162 48.3491 110.459 48.0637L111 47.5448L106.933 43.1649C104.697 40.7559 102.49 38.3833 102.029 37.8924L101.19 37L82.8529 53.8864Z" fill="white"/>
        </svg>
        <div class="b-quiz__quiz__item__final__title">Ваша заявка принята!<br>Мы скоро с вами свяжемся</div>`

        this.stepContainer.append(this.finalStep)


        this.steps = this.quiz.querySelectorAll('[data-quiz-step]')

        this.steps[this.curStep].classList.add('active')
        this.progress.classList.add('b-quiz__quiz__progress')
        this.bar.setAttribute('data-quiz-progress','true')

        this.ActiveBar(this.curStep)
        this.ActiveCounter(this.curStep)

        this.progress.append(this.bar)
        this.progress.append(this.counter)
        this.quiz.prepend(this.progress)
    }

    NavQuizNext = ()=>{
        // this.curStep++
        this.curStep = this.curStep < this.steps.length ? this.curStep+1 : this.steps.length

        this.ShowBtns(this.curStep)
        this.ActiveCounter(this.curStep)
        this.ActiveBar(this.curStep)

        for (let i = 0; i < this.steps.length; i++)
            if (i === this.curStep)
                this.steps[i].classList.add('active')
            else
                this.steps[i].classList.remove('active')
    }
    NavQuizPrev = ()=>{
        this.curStep = this.curStep > 0 ? this.curStep - 1 : 0
        console.log(this.curStep)

        this.ShowBtns(this.curStep)
        this.ActiveCounter(this.curStep)
        this.ActiveBar(this.curStep)

        for (let i = 0; i < this.steps.length; i++)
            if (i === this.curStep)
                this.steps[i].classList.add('active')
            else
                this.steps[i].classList.remove('active')
    }

    ActiveCounter(n= 0){
        this.counter.innerHTML = '<span>Шаг <i data-quiz-current>'+(n+1)+'</i> из <i data-quiz-total>'+(this.steps.length - 1)+'</i></span>'
    }
    ActiveBar (n = 0) {
        this.bar.innerHTML = '';

        for (let i = 0; i < (this.steps.length - 1); i++){
            const barElem = document.createElement('li')
            if(i <= n)
                barElem.classList.add('active')
            this.bar.append(barElem)
        }
    }

    ShowBtns (n) {
        if (n) {
            this.quizPrev.classList.remove('d-none')
            this.quizNext.classList.remove('w-100')
        } else {
            this.quizPrev.classList.add('d-none')
            this.quizNext.classList.add('w-100')
        }
    }
}
;
;
function ShowHiddenInput(_dataSelector){
    const tg = event.target,
        elem = document.querySelector('[data-hidden-input="'+_dataSelector+'"]')

    if (tg.type === 'checkbox' || tg.type === 'radio'){
        if (tg.checked) {
            elem.classList.add('active')
        } else {
            elem.classList.remove('active')
        }
    }
}
;